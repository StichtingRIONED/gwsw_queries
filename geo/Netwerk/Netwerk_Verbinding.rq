# GWSW Geo: Netwerk_Verbinding.rq (20170910-20240930)

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>

#PREFIX : <http://data.gwsw.nl/1.6/totaal/>
PREFIX : <{{&version}}>

SELECT ?Stelsel ?stelseltype ?naam ?type ?Lijn ?beginpunt ?eindpunt ?BobBeginpuntLeiding ?BobEindpuntLeiding ?MateriaalLeiding ?VormLeiding ?BreedteLeiding ?HoogteLeiding ?LengteLeiding ?AantalWoningen ?Aantal_ieBedrijven ?Aantal_ieRecreatie ?AfvoerendOppervlak ?LateraalDebietDWA ?LateraalDebietHWA ?LateraalAfvoerendOppervlak

WHERE
{ 
   ?lei rdf:type :Leiding .
   ?lei sesame:directType ?type .
    
   FILTER (!(isBlank(?lei)))
   FILTER (!(isBlank(?type)))
    
   ?lei rdfs:label ?naam .

   optional
   {   
      ?lei :isPartOf 
      [ rdf:type :Stelsel ;
        rdfs:label ?Stelsel ;
        sesame:directType ?stelseltype ; # Type stelsel erbij (20240930)
      ] .
   }
   ?lei :hasAspect ?ori .
   ?ori rdf:type :Leidingorientatie .

   ?ori :hasAspect # geometrie moet er zijn vanaf GWSW 1.4
   [ 
       rdf:type :Lijn ;
       :hasValue ?Lijn ;
   ] .
   # Synchroon met Hyd_Leiding gemaakt (20230510)
   
   # optional # aansluiting begin. Hou synchroon: hyd_verbinding, mds_leiding
   # {
   #     ?ori :hasPart ?bpnt .
   #     ?bpnt rdf:type :BeginpuntLeiding .
   #     optional {?bpnt :hasAspect
   #     [ 
   #        rdf:type :BobBeginpuntLeiding ;
   #        :hasValue ?BobBeginpuntLeiding ;
   #     ] .}
   #     ?bpnt :hasConnection ?bconn . # Let op: niet optioneel, anders loopt query slecht
   #	optional
	#	{
	#		?bconn :hasAspect
	#		[ 
	#			rdf:type :Punt ;
	#			:hasValue ?bgeo ;
    #        ] .
	#	}
    #	    # Bepaal naam van de aansluiting
 	#	{ ?bconn :isAspectOf ?bconn1 . }
    #    union
    #    { ?bconn :isPartOf [ :isAspectOf ?bconn1 ; ] . } # rechtstreekse aansluiting op pomp
    #        
    #    ?bconn1 rdfs:label ?beginpunt1 .
	#	
    #    optional # toegevoegde naam?
	#	{
	#		?bconn1 :isPartOf ?bconn2 . # deel van put / bouwwerk
    #        filter not exists {?bconn2 rdf:type :Stelsel .} # alles behalve Stelsel-types
	#		?bconn2 rdfs:label ?beginpunt2 .
	#	}
    #    # Ga ervan uit dat beginpunt1 (compartiment) unieke naam heeft (20190527)
    #    # bind (if(bound(?beginpunt1) && bound(?beginpunt2), concat(str(?beginpunt2), "/", str(?beginpunt1)), if (bound(?beginpunt1), ?beginpunt1, "")) as ?beginpunt)
    #    BIND (COALESCE (?beginpunt1, ?beginpunt2) as ?beginpunt) # de eerst geldende (20190527)
	#}
    
    optional
    {
        ?ori :hasPart ?bpnt .
        ?bpnt rdf:type :BeginpuntLeiding .
 
        optional {?bpnt :hasAspect
        [ 
           rdf:type :BobBeginpuntLeiding ;
           :hasValue ?BobBeginpuntLeiding ;
        ] .}
        ?bpnt :hasConnection ?bpunt .
        
        { ?bpunt :isAspectOf ?bUri }
        UNION
        { ?bpunt :isPartOf [ :isAspectOf ?bUri ] . }
        UNION # Ook de aansluitpunten (UitlaatPunt) doen mee als ze niet bij een hoofdconstructie horen (20230302)
        {
          FILTER NOT EXISTS {?bpunt :isAspectOf ?any1 .}
          FILTER NOT EXISTS {?bpunt :isPartOf [ :isAspectOf ?any2 ] . }
          BIND (?bpunt as ?bUri) 
        }
        ?bUri rdfs:label ?beginpunt . 
	}
	optional
	{
        ?ori :hasPart ?epnt .
        ?epnt rdf:type :EindpuntLeiding .

        optional {?epnt :hasAspect
        [ 
           rdf:type :BobEindpuntLeiding ;
           :hasValue ?BobEindpuntLeiding ;
        ] .}
		?epnt :hasConnection ?epunt .
        
        { ?epunt :isAspectOf ?eUri }
        UNION
        { ?epunt :isPartOf [ :isAspectOf ?eUri ] . }
        UNION # Ook de aansluitpunten (UitlaatPunt) doen mee als ze niet bij een hoofdconstructie horen (20230302)
        {
          FILTER NOT EXISTS {?epunt :isAspectOf ?any3 .}
          FILTER NOT EXISTS {?epunt :isPartOf [ :isAspectOf ?any4 ] . }
          BIND (?epunt as ?eUri) 
        }
        ?eUri rdfs:label ?eindpunt . 
   }

   optional {?lei :hasAspect 
   [
       rdf:type :MateriaalLeiding ;
       :hasReference ?MateriaalLeiding ;
   ] .}
   optional {?lei :hasAspect 
   [
       rdf:type :VormLeiding ;
       :hasReference ?VormLeiding ;
   ] .}
  optional {?lei :hasAspect 
   [
      rdf:type :DiameterLeiding ;
# Werkt niet altijd goed? Opgelost via COALESCE (20210521)
#      :hasValue ?BreedteLeiding ; # Diameter als breedte vermelden
       :hasValue ?dia ;  
   ] .}
   optional {?lei :hasAspect 
   [
      rdf:type :BreedteLeiding ;
      :hasValue ?br ;
   ] .}
   BIND (COALESCE (?br, ?dia) as ?BreedteLeiding) # de eerst geldende doet mee (20210521)
   
   optional {?lei :hasAspect 
   [
       rdf:type :HoogteLeiding ;
       :hasValue ?HoogteLeiding ;
   ] .}
   optional {?lei :hasAspect 
   [
       rdf:type :LengteLeiding ;
       :hasValue ?LengteLeiding ;
   ] .}
   optional {?lei :hasAspect 
   [
       rdf:type :AantalWoningen ;
       :hasValue ?AantalWoningen ;
   ] .}
   optional {?lei :hasAspect 
   [
       rdf:type :Aantal_ieBedrijven ;
       :hasValue ?Aantal_ieBedrijven ;
   ] .}
   optional {?lei :hasAspect 
   [
       rdf:type :Aantal_ieRecreatie ;
       :hasValue ?Aantal_ieRecreatie ;
   ] .}
   optional
   {
        SELECT ?lei (sum(?ao) as ?AfvoerendOppervlak) # sommeer de types ao
        WHERE
        {
           optional {?lei :hasAspect 
           [
               rdf:type :AfvoerendOppervlak ;
               :hasValue ?ao ;
           ] .}
        }
        GROUP BY ?lei
    }
   optional {?lei :hasAspect 
   [
       rdf:type :LateraalDebietDWA ;
       :hasValue ?LateraalDebietDWA ;
   ] .}
   optional {?lei :hasAspect 
   [
       rdf:type :LateraalDebietHWA ;
       :hasValue ?LateraalDebietHWA ;
   ] .}
   optional {?lei :hasAspect 
   [
       rdf:type :LateraalAfvoerendOppervlak ;
       :hasValue ?LateraalAfvoerendOppervlak ;
   ] .}
}
